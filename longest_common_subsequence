class Solution {
private:

int f(string& text1,string& text2,int l1,int l2,vector<vector<int>>& dp){

if(l1 < 0 || l2 < 0){
    return 0;
}

if(dp[l1][l2] != -1){
    return dp[l1][l2];
}
// if both ends are same
else if(text1[l1] == text2[l2]){
    return dp[l1][l2] = 1 + f(text1,text2,l1-1,l2-1,dp); 
}

else{
return dp[l1][l2] = max(f(text1,text2,l1-1,l2,dp),f(text1,text2,l1,l2-1,dp));

}



}

public:shor
    int longestCommonSubsequence(string text1, string text2) {

vector<vector<int>> dp(text1.length()+1,vector<int>(text2.length()+1,-1));

// return f(text1,text2,text1.length()-1,text2.length()-1,dp);
int n = text1.length();
for(int i = 0; i <=n;i++){
    dp[i][0] = 0;
}

int m = text2.length();

for(int i = 0; i <=m;i++){
    dp[0][i] = 0;
}

for(int i = 1; i<= n; i++){
    for(int j = 1; j <= m; j++ ){

if(text1[i-1] == text2[j-1]){
    dp[i][j] = 1 + dp[i-1][j-1];
}

else{
dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);

}

}
}


return dp[n][m];


    }
};



// space and time optimisation


public:
    int longestCommonSubsequence(string text1, string text2) {

// vector<vector<int>> dp(text1.length()+1,vector<int>(text2.length()+1,-1));

vector<int> prev(text2.length()+1,0);
vector<int> curr(text2.length()+1,-1);
vector<int> next(text2.length()+1,-1);

curr[0] = 0;
next[0]= 0;
// return f(text1,text2,text1.length()-1,text2.length()-1,dp);
int n = text1.length();
// for(int i = 0; i <=n;i++){
//     dp[i][0] = 0;
// }

int m = text2.length();

// for(int i = 0; i <=m;i++){
//     dp[0][i] = 0;
// }

for(int i = 1; i<= n; i++){
    for(int j = 1; j <= m; j++ ){

if(text1[i-1] == text2[j-1]){
    curr[j] = 1 + prev[j-1];
}

else{
curr[j] = max(prev[j] , curr[j-1]);

}

}
prev = curr;
curr = next;
}


return prev[m];


    };
